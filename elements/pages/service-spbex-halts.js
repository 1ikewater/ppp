import ppp from '../../ppp.js';
import { html, css, ref } from '../../vendor/fast-element.min.js';
import {
  documentPageFooterPartial,
  documentPageHeaderPartial,
  Page,
  pageStyles,
  PageWithService,
  PageWithSupabaseService
} from '../page.js';
import {
  servicePageFooterExtraControls,
  servicePageHeaderExtraControls
} from './service.js';
import { applyMixins } from '../../vendor/fast-utilities.js';
import { APIS,  SERVICES } from '../../lib/const.js';
import '../badge.js';
import '../button.js';
import '../query-select.js';
import '../select.js';
import '../snippet.js';
import '../terminal.js';
import '../text-field.js';

const exampleFormatterCode = `/**
 * –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—É–∑–µ.
 *
 * @param {string} isin - ISIN –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
 * @param {string} ticker - –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
 * @param {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
 * @param {string} currency - –í–∞–ª—é—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
 * @param {string} date - –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–∏—Ä–∂–∏.
 * @param {string} url - –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ –±–∏—Ä–∂–∏.
 * @param {string} start - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—É–∑—ã, MSK.
 * @param {string} finish - –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—É–∑—ã, MSK.
 */
return \`‚ÄºÔ∏è‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤ (SPBEX)
\${'$'}\${ticker || isin}
<b>\${name}, \${isin}</b>
üïí \${start} - \${finish}

<a href="\${encodeURIComponent(url)}">–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–æ—Ä–≥–æ–≤</a>
\`;`;

export const serviceSpbexHaltsPageTemplate = html`
  <template class="${(x) => x.generateClasses()}">
    <ppp-loader></ppp-loader>
    <form novalidate>
      ${documentPageHeaderPartial({
        pageUrl: import.meta.url,
        extraControls: servicePageHeaderExtraControls
      })}
      <section>
        <div class="label-group">
          <h5>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞</h5>
          <p class="description">
            –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∏–º—è, —á—Ç–æ–±—ã —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å, –∫–æ–≥–¥–∞
            –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.
          </p>
        </div>
        <div class="input-group">
          <ppp-text-field
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
            value="${(x) => x.document.name}"
            ${ref('name')}
          ></ppp-text-field>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–ü—Ä–æ—Ñ–∏–ª—å API Supabase</h5>
        </div>
        <div class="input-group">
          <ppp-query-select
            ${ref('supabaseApiId')}
            value="${(x) => x.document.supabaseApiId}"
            :context="${(x) => x}"
            :preloaded="${(x) => x.document.supabaseApi ?? ''}"
            :query="${() => {
              return (context) => {
                return context.services
                  .get('mongodb-atlas')
                  .db('ppp')
                  .collection('apis')
                  .find({
                    $and: [
                      {
                        type: `[%#(await import(ppp.rootUrl + '/lib/const.js')).APIS.SUPABASE%]`
                      },
                      {
                        $or: [
                          { removed: { $ne: true } },
                          { _id: `[%#this.document.supabaseApiId ?? ''%]` }
                        ]
                      }
                    ]
                  })
                  .sort({ updatedAt: -1 });
              };
            }}"
            :transform="${() => ppp.decryptDocumentsTransformation()}"
          ></ppp-query-select>
          <div class="spacing2"></div>
          <ppp-button
            @click="${() =>
              ppp.app.mountPage(`api-${APIS.SUPABASE}`, {
                size: 'xlarge',
                adoptHeader: true
              })}"
            appearance="primary"
          >
            –î–æ–±–∞–≤–∏—Ç—å API Supabase
          </ppp-button>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–ë–∞–∑–æ–≤—ã–π URL</h5>
          <p class="description">
            –°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å –±–∏—Ä–∂–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞.
          </p>
        </div>
        <div class="input-group">
          <ppp-text-field
            placeholder="https://spbexchange.ru"
            value="${(x) => x.document.proxyURL}"
            ${ref('proxyURL')}
          ></ppp-text-field>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Pusher</h5>
          <p class="description">
            –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
            –≤ –∫–∞–Ω–∞–ª ppp –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Pusher.
          </p>
        </div>
        <div class="input-group">
          <ppp-query-select
            ${ref('pusherApiId')}
            deselectable
            placeholder="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞"
            value="${(x) => x.document.pusherApiId}"
            :context="${(x) => x}"
            :preloaded="${(x) => x.document.pusherApi ?? ''}"
            :query="${() => {
              return (context) => {
                return context.services
                  .get('mongodb-atlas')
                  .db('ppp')
                  .collection('apis')
                  .find({
                    $and: [
                      {
                        type: `[%#(await import(ppp.rootUrl + '/lib/const.js')).APIS.PUSHER%]`
                      },
                      {
                        $or: [
                          { removed: { $ne: true } },
                          {
                            _id: `[%#this.document.pusherApiId ?? ''%]`
                          }
                        ]
                      }
                    ]
                  })
                  .sort({ updatedAt: -1 });
              };
            }}"
            :transform="${() => ppp.decryptDocumentsTransformation()}"
          ></ppp-query-select>
          <div class="spacing2"></div>
          <ppp-button
            @click="${() =>
              ppp.app.mountPage(`api-${APIS.PUSHER}`, {
                size: 'xlarge',
                adoptHeader: true
              })}"
            appearance="primary"
          >
            –î–æ–±–∞–≤–∏—Ç—å API Pusher
          </ppp-button>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞</h5>
          <p class="description">
            –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—É–∑–∞—Ö –æ—Ç –±–∏—Ä–∂–∏.
            –ó–∞–¥–∞—ë—Ç—Å—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
          </p>
        </div>
        <div class="input-group">
          <ppp-text-field
            type="number"
            placeholder="5"
            value="${(x) => x.document.interval ?? '5'}"
            ${ref('interval')}
          ></ppp-text-field>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–ì–ª—É–±–∏–Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è</h5>
          <p class="description">
            –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
          </p>
        </div>
        <div class="input-group">
          <ppp-text-field
            type="number"
            placeholder="10000"
            value="${(x) => x.document.depth ?? '10000'}"
            ${ref('depth')}
          ></ppp-text-field>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–ë–æ—Ç</h5>
          <p class="description">
            –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—É–∑–∞—Ö. –î–æ–ª–∂–µ–Ω
            –æ–±–ª–∞–¥–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ.
          </p>
        </div>
        <div class="input-group">
          <ppp-query-select
            ${ref('botId')}
            value="${(x) => x.document.botId}"
            :context="${(x) => x}"
            :preloaded="${(x) => x.document.bot ?? ''}"
            :query="${() => {
              return (context) => {
                return context.services
                  .get('mongodb-atlas')
                  .db('ppp')
                  .collection('bots')
                  .find({
                    $or: [
                      { removed: { $ne: true } },
                      { _id: `[%#this.document.botId ?? ''%]` }
                    ]
                  })
                  .sort({ updatedAt: -1 });
              };
            }}"
            :transform="${() => ppp.decryptDocumentsTransformation()}"
          ></ppp-query-select>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–ö–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞</h5>
          <p class="description">
            –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—É–∑–∞—Ö.
          </p>
        </div>
        <div class="input-group">
          <ppp-text-field
            type="number"
            placeholder="–ö–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞"
            value="${(x) => x.document.channel}"
            ${ref('channel')}
          ></ppp-text-field>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h5>
          <p class="description">
            –õ–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –Ω–∞ —è–∑—ã–∫–µ PLV8.
          </p>
        </div>
        <div class="input-group">
          <ppp-snippet
            revertable
            :code="${(x) => x.document.formatterCode ?? exampleFormatterCode}"
            ${ref('formatterCode')}
            @revert="${(x) => {
              x.formatterCode.updateCode(exampleFormatterCode);
            }}"
          ></ppp-snippet>
          <div class="spacing2"></div>
          <ppp-button
            ?disabled="${(x) => true || !x.isSteady()}"
            @click="${(x) => x.sendTestSpbexHaltMessage()}"
            appearance="primary"
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          </ppp-button>
        </div>
      </section>
      ${documentPageFooterPartial({
        text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PPP –∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤ Supabase',
        extraControls: servicePageFooterExtraControls
      })}
    </form>
  </template>
`;

export const serviceSpbexHaltsPageStyles = css`
  ${pageStyles}
  ppp-snippet {
    height: 300px;
  }
`;

// TODO - implement this class
export class ServiceSpbexHaltsPage extends Page {
  collection = 'services';

  async #deploy() {}

  async validate() {}

  async read() {
    return (context) => {
      return context.services
        .get('mongodb-atlas')
        .db('ppp')
        .collection('[%#this.collection%]')
        .aggregate([
          {
            $match: {
              _id: new BSON.ObjectId('[%#payload.documentId%]'),
              type: `[%#(await import(ppp.rootUrl + '/lib/const.js')).SERVICES.SPBEX_HALTS%]`
            }
          },
          {
            $lookup: {
              from: 'apis',
              localField: 'supabaseApiId',
              foreignField: '_id',
              as: 'supabaseApi'
            }
          },
          {
            $lookup: {
              from: 'apis',
              localField: 'pusherApiId',
              foreignField: '_id',
              as: 'pusherApi'
            }
          },
          {
            $unwind: {
              path: '$pusherApi',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $unwind: '$supabaseApi'
          },
          {
            $lookup: {
              from: 'bots',
              localField: 'botId',
              foreignField: '_id',
              as: 'bot'
            }
          },
          {
            $unwind: '$bot'
          }
        ]);
    };
  }

  async find() {
    return {
      type: SERVICES.SPBEX_HALTS,
      name: this.name.value.trim(),
      removed: { $ne: true }
    };
  }

  async submit() {
    return false;
  }
}

applyMixins(ServiceSpbexHaltsPage, PageWithService, PageWithSupabaseService);

// noinspection JSUnusedGlobalSymbols
export default ServiceSpbexHaltsPage.compose({
  template: serviceSpbexHaltsPageTemplate,
  styles: serviceSpbexHaltsPageStyles
}).define();
