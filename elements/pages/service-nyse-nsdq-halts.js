import ppp from '../../ppp.js';
import { html, css, ref } from '../../vendor/fast-element.min.js';
import {
  documentPageFooterPartial,
  documentPageHeaderPartial,
  Page,
  pageStyles,
  PageWithService,
  PageWithSupabaseService
} from '../page.js';
import {
  servicePageFooterExtraControls,
  servicePageHeaderExtraControls
} from './service.js';
import { validate } from '../../lib/ppp-errors.js';
import { Tmpl } from '../../lib/tmpl.js';
import { applyMixins } from '../../vendor/fast-utilities.js';
import { APIS, SERVICE_STATE, SERVICES } from '../../lib/const.js';
import { uuidv4 } from '../../lib/ppp-crypto.js';
import '../badge.js';
import '../button.js';
import '../query-select.js';
import '../select.js';
import '../snippet.js';
import '../terminal.js';
import '../text-field.js';

await ppp.i18n(import.meta.url);

const exampleSymbolsCodeAll = `/**
 * –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ —Ç–∏–∫–µ—Ä—ã.
 *
 */
return [];`;

const exampleFormatterCode = `/**
 * –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—É–∑–µ.
 *
 * @param {string} halt_date - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—É–∑—ã (MM/DD/YYYY).
 * @param {string} halt_time - –í—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—É–∑—ã (Eastern Time).
 * @param {string} symbol - –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
 * @param {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
 * @param {string} market - –ü–ª–æ—â–∞–¥–∫–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
 * @param {string} reason_code - –ö–æ–¥ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—É–∑—ã.
 * @param {string} pause_threshold_price - –ò–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—É–∑—ã.
 * @param {string} resumption_date - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—É–∑—ã (MM/DD/YYYY).
 * @param {string} resumption_quote_time - –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–Ω–∏–≥–∏ –∑–∞—è–≤–æ–∫ (Eastern Time).
 * @param {string} resumption_trade_time - –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–æ—Ä–≥–æ–≤ (Eastern Time).
 */
const mappings = {
  T1: 'Halt - News Pending. –û–∂–∏–¥–∞—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏.',
  T2: 'Halt - News Released. –≠–º–∏—Ç–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –æ –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (SEC Regulation FD).',
  T5: 'Single Stock Trading Pause in Effect. –¶–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 10% (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.',
  T6: 'Halt - Extraordinary Market Activity. –ù–µ–æ–±—ã—á–Ω–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ NASDAQ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã (–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã) —Å –∫–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —Å —Ä–µ–ø–æ—Ä—Ç–∏–Ω–≥–æ–º –≤ –ª–µ–Ω—Ç—É —Å–¥–µ–ª–æ–∫, –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.',
  T8: 'Halt - Exchange-Traded-Fund (ETF). –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ ETF, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –±–∞–∑–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö.',
  T12: 'Halt - Additional Information Requested by NASDAQ. –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ NASDAQ –æ–∂–∏–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—ç–º–∏—Ç–µ–Ω—Ç—É –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—Ç –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å –æ—Ç–≤–µ—Ç).',
  H4: 'Halt - Non-compliance. –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ª–∏—Å—Ç–∏–Ω–≥–∞ NASDAQ.',
  H9: 'Halt - Not Current. –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤ —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–µ –æ—Ä–≥–∞–Ω—ã (SEC).',
  H10: 'Halt - SEC Trading Suspension. SEC –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ —Ç–æ—Ä–≥–∏ –Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.',
  H11: 'Halt - Regulatory Concern. –¢–æ—Ä–≥–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –¥—Ä—É–≥–æ–º —Ä—ã–Ω–æ—á–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏—Ö –æ—Ä–≥–∞–Ω–æ–≤. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–∂–µ—Ç –∏—Å—á–∏—Å–ª—è—Ç—å—Å—è –¥–Ω—è–º–∏ –∏–ª–∏ –Ω–µ–¥–µ–ª—è–º–∏.',
  O1: 'Operations Halt, Contact Market Operations. –ü—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Ä–∫–µ—Ç-–º–µ–π–∫–∏–Ω–≥–æ–º (–ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞—è–≤–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–æ—Ä–≥–æ–≤).',
  IPO1: 'HIPO Issue not yet Trading. –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Ç–æ—Ä–≥–∞—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –≤—ã—Ö–æ–¥—è—â–∏—Ö –Ω–∞ IPO (–≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ç–æ—Ä–≥–æ–≤). –¢–æ—Ä–≥–∏ IPO –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤.',
  M1: 'Corporate Action. –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ.',
  M2: 'Quotation Not Available. –ù–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É.',
  LUDP: 'Volatility Trading Pause. –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—É–∑–∞ –≤ —Å–≤—è–∑–∏ —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é.',
  LUDS: 'Volatility Trading Pause - Straddle Condition. –ü–∞—É–∑–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –≤—ã—Ö–æ–¥–æ–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ bid –∏–ª–∏ ask –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã.',
  MWC1: 'Market Wide Circuit Breaker Halt. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤ –∏–∑-–∑–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–æ–ø-–∑–∞—â–∏—Ç—ã —Ä—ã–Ω–∫–∞.',
  MWC2: 'Market Wide Circuit Breaker Halt. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤ –∏–∑-–∑–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–æ–ø-–∑–∞—â–∏—Ç—ã —Ä—ã–Ω–∫–∞.',
  MWC3: 'Market Wide Circuit Breaker Halt. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤ –∏–∑-–∑–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–æ–ø-–∑–∞—â–∏—Ç—ã —Ä—ã–Ω–∫–∞.',
  MWC0: 'Market Wide Circuit Breaker Halt. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤ –∏–∑-–∑–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–æ–ø-–∑–∞—â–∏—Ç—ã —Ä—ã–Ω–∫–∞.',
  T3: 'News and Resumption Times. –≠–º–∏—Ç–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π, –≤—Å–∫–æ—Ä–µ –æ–∂–∏–¥–∞—é—Ç—Å—è —Ç–æ—Ä–≥–∏.',
  T7: 'Single Stock Trading Pause/Quotation-Only Period. –°–º. –∫–æ–¥ T5.',
  R4: 'Qualifications Issues Reviewed/Resolved; Quotations/Trading to Resume. –°–º. –∫–æ–¥ H4.',
  R9: 'Filing Requirements Satisfied/Resolved; Quotations/Trading To Resume. –°–º. –∫–æ–¥ H9.',
  C3: 'Issuer News Not Forthcoming; Quotations/Trading To Resume. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–º–µ–Ω–µ–Ω–∞. –°–º. –∫–æ–¥—ã T2 –∏ T3.',
  C4: 'Qualifications Halt Ended; Maintenance Requirements Met. –°–º. –∫–æ–¥—ã H4 –∏ R4.',
  C9: 'Qualifications Halt Concluded; Filings Met; Quotes/Trades To Resume. –°–º. –∫–æ–¥—ã H9 –∏ R9.',
  C11: 'Trade Halt Concluded By Other Regulatory Auth.; Quotes/Trades Resume. –°–º. –∫–æ–¥ H11.',
  R1: 'New Issue Available. –°–º. –∫–æ–¥ T1.',
  R2: 'Issue Available. –°–º. –∫–æ–¥ T2.',
  IPOQ: 'IPO security released for quotation. –î–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å IPO - –Ω–∞—á–∞–ª–æ –∫–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –¢–æ–ª—å–∫–æ NASDAQ.',
  IPOE: 'IPO security - positioning window extension. –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –≤ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ NASDAQ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å IPO.',
  MWCQ: 'Market Wide Circuit Breaker Resumption. –°–Ω—è—Ç–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–æ–ø-–∑–∞—â–∏—Ç—ã —Ä—ã–Ω–∫–∞.',
  M: 'Volatility Trading Pause. –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—É–∑–∞ –≤ —Å–≤—è–∑–∏ —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é.',
  D: 'Security deletion from NASDAQ / CQS. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω —Å —Ç–æ—Ä–≥–æ–≤ (–¥–µ–ª–∏—Å—Ç–∏–Ω–≥).'
};
const formatDateTime = (dateString) => {
  const currentDate = new Date();
  const currentYear = currentDate.getFullYear();
  const firstOfMarch = new Date(currentYear, 2, 1);
  const daysUntilFirstSundayInMarch = (7 - firstOfMarch.getDay()) % 7;
  const secondSundayInMarch = firstOfMarch.getDate() + daysUntilFirstSundayInMarch + 7;
  const start = new Date(currentYear, 2, secondSundayInMarch);
  const firstOfNovember = new Date(currentYear, 10, 1);
  const daysUntilFirstSundayInNov = (7 - firstOfNovember.getDay()) % 7;
  const firstSundayInNovember = firstOfNovember.getDate() + daysUntilFirstSundayInNov;
  const end = new Date(currentYear, 10, firstSundayInNovember);
  const isDST = currentDate.getTime() <= end.getTime() && currentDate.getTime() >= start.getTime();
  const [date, timeZ] = new Date(\`\${dateString} GMT-\${isDST ? '7' : '8'}\`)
    .toISOString()
    .split(/T/);
  const [y, m, d] = date.split(/-/);
  const [time] = timeZ.split(/\\./);

  return \`\${d}.\${m}.\${y} \${time} MSK\`;
};

let message = \`‚ÄºÔ∏è‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤ (\${market})
\${'\$'}\${symbol}
<b>\${name}</b>
üïí \${formatDateTime(\`\${halt_date} \${halt_time}\`)}

\`;

const description = mappings[reason_code];

if (description) message += \`<b>–ö–æ–¥ \${reason_code}</b>: \${description}\\n\`;
else message += \`<b>–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞</b>\\n\`;

if (resumption_quote_time)
  message += \`\\n–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–Ω–∏–≥–∏ –∑–∞—è–≤–æ–∫: \${formatDateTime(
    \`\${resumption_date} \${resumption_quote_time}\`
  )}\`;

if (resumption_trade_time)
  message += \`\\n–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤: \${formatDateTime(
    \`\${resumption_date} \${resumption_trade_time}\`
  )}\`;

message +=
  '\\n\\n<a href="https://www.nasdaqtrader.com/trader.aspx?id=TradeHalts">–ö —Å–ø–∏—Å–∫—É —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—É–∑</a>';

return message;`;

export const serviceNyseNsdqHaltsPageTemplate = html`
  <template class="${(x) => x.generateClasses()}">
    <ppp-loader></ppp-loader>
    <form novalidate>
      ${documentPageHeaderPartial({
        pageUrl: import.meta.url,
        extraControls: servicePageHeaderExtraControls
      })}
      <section>
        <div class="label-group">
          <h5>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞</h5>
          <p class="description">
            –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∏–º—è, —á—Ç–æ–±—ã —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å, –∫–æ–≥–¥–∞
            –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.
          </p>
        </div>
        <div class="input-group">
          <ppp-text-field
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
            value="${(x) => x.document.name}"
            ${ref('name')}
          ></ppp-text-field>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–ü—Ä–æ—Ñ–∏–ª—å API Supabase</h5>
        </div>
        <div class="input-group">
          <ppp-query-select
            ${ref('supabaseApiId')}
            value="${(x) => x.document.supabaseApiId}"
            :context="${(x) => x}"
            :preloaded="${(x) => x.document.supabaseApi ?? ''}"
            :query="${() => {
              return (context) => {
                return context.services
                  .get('mongodb-atlas')
                  .db('ppp')
                  .collection('apis')
                  .find({
                    $and: [
                      {
                        type: `[%#(await import(ppp.rootUrl + '/lib/const.js')).APIS.SUPABASE%]`
                      },
                      {
                        $or: [
                          { removed: { $ne: true } },
                          { _id: `[%#this.document.supabaseApiId ?? ''%]` }
                        ]
                      }
                    ]
                  })
                  .sort({ updatedAt: -1 });
              };
            }}"
            :transform="${() => ppp.decryptDocumentsTransformation()}"
          ></ppp-query-select>
          <div class="spacing2"></div>
          <ppp-button
            @click="${() =>
              ppp.app.mountPage(`api-${APIS.SUPABASE}`, {
                size: 'xlarge',
                adoptHeader: true
              })}"
            appearance="primary"
          >
            –î–æ–±–∞–≤–∏—Ç—å API Supabase
          </ppp-button>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Pusher</h5>
          <p class="description">–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å
            —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞ –≤ –∫–∞–Ω–∞–ª ppp –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Pusher.</p>
        </div>
        <div class="input-group">
          <ppp-query-select
            ${ref('pusherApiId')}
            deselectable
            placeholder="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞"
            value="${(x) => x.document.pusherApiId}"
            :context="${(x) => x}"
            :preloaded="${(x) => x.document.pusherApi ?? ''}"
            :query="${() => {
              return (context) => {
                return context.services
                  .get('mongodb-atlas')
                  .db('ppp')
                  .collection('apis')
                  .find({
                    $and: [
                      {
                        type: `[%#(await import(ppp.rootUrl + '/lib/const.js')).APIS.PUSHER%]`
                      },
                      {
                        $or: [
                          { removed: { $ne: true } },
                          {
                            _id: `[%#this.document.pusherApiId ?? ''%]`
                          }
                        ]
                      }
                    ]
                  })
                  .sort({ updatedAt: -1 });
              };
            }}"
            :transform="${() => ppp.decryptDocumentsTransformation()}"
          ></ppp-query-select>
          <div class="spacing2"></div>
          <ppp-button
            @click="${() =>
              ppp.app.mountPage(`api-${APIS.PUSHER}`, {
                size: 'xlarge',
                adoptHeader: true
              })}"
            appearance="primary"
          >
            –î–æ–±–∞–≤–∏—Ç—å API Pusher
          </ppp-button>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞</h5>
          <p class="description">
            –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—É–∑–∞—Ö –æ—Ç –±–∏—Ä–∂–∏.
            –ó–∞–¥–∞—ë—Ç—Å—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
          </p>
        </div>
        <div class="input-group">
          <ppp-text-field
            type="number"
            placeholder="5"
            value="${(x) => x.document.interval ?? '5'}"
            ${ref('interval')}
          ></ppp-text-field>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–ì–ª—É–±–∏–Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è</h5>
          <p class="description">
            –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
          </p>
        </div>
        <div class="input-group">
          <ppp-text-field
            type="number"
            placeholder="10000"
            value="${(x) => x.document.depth ?? '10000'}"
            ${ref('depth')}
          ></ppp-text-field>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–¢–∏–∫–µ—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</h5>
          <p class="description">
            –¢–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —è–∑—ã–∫–µ PLV8, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è
            –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –ú–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏:
          </p>
          <ppp-select
            value="${(x) => x.document.symbolsTemplate ?? 'all'}"
            @change="${(x) => {
              x.symbolsCode.updateCode(
                x.symbolsTemplate.value === 'all' ? exampleSymbolsCodeAll : ''
              );
            }}"
            ${ref('symbolsTemplate')}
          >
            <ppp-option value="all">
              –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Å–µ —Ç–∏–∫–µ—Ä—ã
            </ppp-option>
          </ppp-select>
        </div>
        <div class="input-group">
          <ppp-snippet
            revertable
            :code="${(x) => x.document.symbolsCode ?? exampleSymbolsCodeAll}"
            @revert="${(x) => {
              x.symbolsCode.updateCode(
                x.symbolsTemplate.value === 'all' ? exampleSymbolsCodeAll : ''
              );
            }}"
            ${ref('symbolsCode')}
          ></ppp-snippet>
          <div class="spacing2">
            <ppp-button
              ?disabled="${(x) => !x.isSteady()}"
              @click="${(x) => x.callSymbolsFunction()}"
              appearance="primary"
            >
              –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
            </ppp-button>
          </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–ë–æ—Ç</h5>
          <p class="description">
            –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—É–∑–∞—Ö. –î–æ–ª–∂–µ–Ω
            –æ–±–ª–∞–¥–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ.
          </p>
        </div>
        <div class="input-group">
          <ppp-query-select
            ${ref('botId')}
            value="${(x) => x.document.botId}"
            :context="${(x) => x}"
            :preloaded="${(x) => x.document.bot ?? ''}"
            :query="${() => {
              return (context) => {
                return context.services
                  .get('mongodb-atlas')
                  .db('ppp')
                  .collection('bots')
                  .find({
                    $or: [
                      { removed: { $ne: true } },
                      { _id: `[%#this.document.botId ?? ''%]` }
                    ]
                  })
                  .sort({ updatedAt: -1 });
              };
            }}"
            :transform="${() => ppp.decryptDocumentsTransformation()}"
          ></ppp-query-select>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–ö–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞</h5>
          <p class="description">
            –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—É–∑–∞—Ö.
          </p>
        </div>
        <div class="input-group">
          <ppp-text-field
            type="number"
            placeholder="–ö–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞"
            value="${(x) => x.document.channel}"
            ${ref('channel')}
          ></ppp-text-field>
        </div>
      </section>
      <section>
        <div class="label-group">
          <h5>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h5>
          <p class="description">
            –õ–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –Ω–∞ —è–∑—ã–∫–µ PLV8.
          </p>
        </div>
        <div class="input-group">
          <ppp-snippet
            revertable
            :code="${(x) => x.document.formatterCode ?? exampleFormatterCode}"
            ${ref('formatterCode')}
            @revert="${(x) => {
              x.formatterCode.updateCode(exampleFormatterCode);
            }}"
          ></ppp-snippet>
          <div class="spacing2"></div>
          <ppp-button
            ?disabled="${(x) => !x.isSteady()}"
            @click="${(x) => x.sendTestNyseNsdqHaltMessage()}"
            appearance="primary"
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          </ppp-button>
        </div>
      </section>
      ${documentPageFooterPartial({
        text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PPP –∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤ Supabase',
        extraControls: servicePageFooterExtraControls
      })}
    </form>
  </template>
`;

export const serviceNyseNsdqHaltsPageStyles = css`
  ${pageStyles}
  ppp-snippet {
    height: 300px;
  }
`;

export class ServiceNyseNsdqHaltsPage extends Page {
  collection = 'services';

  async sendTestNyseNsdqHaltMessage() {
    this.beginOperation();

    try {
      await validate(this.supabaseApiId);
      await validate(this.botId);
      await validate(this.channel);
      await validate(this.formatterCode);

      const temporaryFormatterName = `ppp_${uuidv4().replaceAll('-', '_')}`;

      // Returns form data
      const temporaryFormatterBody = `function ${temporaryFormatterName}(halt_date,
        halt_time, symbol, name, market, reason_code, pause_threshold_price,
        resumption_date, resumption_quote_time, resumption_trade_time) {
          const closure = () => {${this.formatterCode.value}};
          const formatted = closure();

          if (typeof formatted === 'string')
            return \`chat_id=${this.channel.value}&text=\${formatted}&parse_mode=html\`;
          else {
            const options = formatted.options || {};
            let formData = \`chat_id=${this.channel.value}&text=\${formatted.text}\`;

            if (typeof options.parse_mode === 'undefined')
              formData += '&parse_mode=html';

            if (typeof options.entities !== 'undefined')
              formData += \`&entities=\${encodeURIComponent(options.entities)}\`;

            if (options.disable_web_page_preview === true)
              formData += '&disable_web_page_preview=true';

            if (options.disable_notification === true)
              formData += '&disable_notification=true';

            if (options.protect_content === true)
              formData += '&protect_content=true';

            if (typeof options.reply_markup !== 'undefined')
              formData += \`&reply_markup=\${encodeURIComponent(options.reply_markup)}\`;

            return formData;
          }
        }`;

      const functionBody = `${temporaryFormatterBody}
         return plv8.execute(\`select content from http_post('https://api.telegram.org/bot${
           this.botId.datum().token
         }/sendMessage',
        '\${${temporaryFormatterName}('02/10/2022', '15:37:48', 'ASTR', 'Astra Space Inc Cl A Cmn Stk', 'NASDAQ', 'LUDP',
          '', '02/10/2022', '15:37:48', '15:42:48')}',
        'application/x-www-form-urlencoded')\`);`;

      await this.callTemporaryFunction({
        api: this.supabaseApiId.datum(),
        functionBody
      });

      this.showSuccessNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
    } catch (e) {
      this.failOperation(e);
    } finally {
      this.endOperation();
    }
  }

  async callSymbolsFunction(returnResult) {
    this.beginOperation();

    try {
      await validate(this.supabaseApiId);
      await validate(this.symbolsCode);

      const result = await this.callTemporaryFunction({
        api: this.supabaseApiId.datum(),
        functionBody: this.symbolsCode.value,
        returnResult
      });

      if (!returnResult)
        this.showSuccessNotification(
          '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∞ —Ñ—É–Ω–∫—Ü–∏—é. –°–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞.'
        );

      return result;
    } catch (e) {
      this.failOperation(e);
    } finally {
      this.endOperation();
    }
  }

  async #deploy() {
    this.document.supabaseApi = this.supabaseApiId.datum();
    this.document.pusherApi = this.pusherApiId.datum();
    this.document.bot = this.botId.datum();

    const [sendTelegramMessage, deployNyseNsdqHalts] = await Promise.all([
      fetch(this.getSQLUrl('send-telegram-message.sql')).then((r) => r.text()),
      fetch(this.getSQLUrl(`${SERVICES.NYSE_NSDQ_HALTS}/deploy.sql`)).then(
        (r) => r.text()
      )
    ]);

    this.document.symbols = JSON.stringify(
      await this.callSymbolsFunction(true)
    );

    const query = `${sendTelegramMessage}
      ${await new Tmpl().render(this, deployNyseNsdqHalts, {})}`;

    await this.executeSQL({
      api: this.document.supabaseApi,
      query: await new Tmpl().render(this, query, {})
    });
  }

  async validate() {
    await validate(this.name);
    await validate(this.supabaseApiId);
    await validate(this.interval);
    await validate(this.interval, {
      hook: async (value) => +value > 0 && +value <= 1000,
      errorMessage: '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 1000'
    });
    await validate(this.depth);
    await validate(this.depth, {
      hook: async (value) => +value >= 1000 && +value <= 10000,
      errorMessage: '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1000 –¥–æ 10000'
    });
    await validate(this.symbolsCode);
    await validate(this.botId);
    await validate(this.channel);
    await validate(this.formatterCode);
  }

  async read() {
    return (context) => {
      return context.services
        .get('mongodb-atlas')
        .db('ppp')
        .collection('[%#this.collection%]')
        .aggregate([
          {
            $match: {
              _id: new BSON.ObjectId('[%#payload.documentId%]'),
              type: `[%#(await import(ppp.rootUrl + '/lib/const.js')).SERVICES.NYSE_NSDQ_HALTS%]`
            }
          },
          {
            $lookup: {
              from: 'apis',
              localField: 'supabaseApiId',
              foreignField: '_id',
              as: 'supabaseApi'
            }
          },
          {
            $lookup: {
              from: 'apis',
              localField: 'pusherApiId',
              foreignField: '_id',
              as: 'pusherApi'
            }
          },
          {
            $unwind: {
              path: '$pusherApi',
              preserveNullAndEmptyArrays: true
            }
          },
          {
            $unwind: '$supabaseApi'
          },
          {
            $lookup: {
              from: 'bots',
              localField: 'botId',
              foreignField: '_id',
              as: 'bot'
            }
          },
          {
            $unwind: '$bot'
          }
        ]);
    };
  }

  async find() {
    return {
      type: SERVICES.NYSE_NSDQ_HALTS,
      name: this.name.value.trim(),
      removed: { $ne: true }
    };
  }

  async submit() {
    const state =
      this.document.state === SERVICE_STATE.ACTIVE
        ? SERVICE_STATE.ACTIVE
        : SERVICE_STATE.STOPPED;

    return [
      {
        $set: {
          name: this.name.value.trim(),
          supabaseApiId: this.supabaseApiId.value,
          pusherApiId: this.pusherApiId.value,
          interval: Math.ceil(Math.abs(this.interval.value)),
          depth: Math.ceil(Math.abs(this.depth.value)),
          symbolsCode: this.symbolsCode.value,
          symbolsTemplate: this.symbolsTemplate.value,
          botId: this.botId.value,
          channel: +this.channel.value,
          formatterCode: this.formatterCode.value,
          version: 1,
          state: SERVICE_STATE.FAILED,
          updatedAt: new Date()
        },
        $setOnInsert: {
          type: SERVICES.NYSE_NSDQ_HALTS,
          createdAt: new Date()
        }
      },
      this.#deploy,
      () => ({
        $set: {
          state,
          updatedAt: new Date()
        }
      })
    ];
  }
}

applyMixins(ServiceNyseNsdqHaltsPage, PageWithService, PageWithSupabaseService);

// noinspection JSUnusedGlobalSymbols
export default ServiceNyseNsdqHaltsPage.compose({
  template: serviceNyseNsdqHaltsPageTemplate,
  styles: serviceNyseNsdqHaltsPageStyles
}).define();
